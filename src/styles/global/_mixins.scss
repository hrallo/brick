// MIXINS

// Media Queries
//
// A media query that applies styles only on specified screen size. Screen size information can be found in the variables documentation.
//
// xs only styles - @include xs {}
// sm only styles - @include sm {}
// md only styles - @include md {}
// lg only styles - @include lg {}
// xs and greater - @include gt-xs {}
// sm and greater - @include gt-sm {}
// md and greater - @include gt-md {}
// lg and greater - @include gt-lg {}
// xs and less - @include lt-xs {}
// sm and less - @include lt-sm {}
// md and less - @include lt-md {}
// lg and less - @include lt-lg {}

$xs: '(min-width: 0) and (max-width: #{$xs-width})';
$gt-xs: '(min-width: #{$xs-width})';
$sm: '(min-width: #{$xs-width}) and (max-width: #{$sm-width})';
$lt-sm: '(max-width: #{$sm-width})';
$gt-sm: '(min-width: #{$sm-width})';
$md: '(min-width: #{$sm-width}) and (max-width: #{$md-width})';
$lt-md: '(max-width: #{$md-width})';
$gt-md: '(min-width: #{$md-width})';
$lt-lg: '(max-width: #{$lg-width})';
$lg: '(min-width: #{$md-width}) and (max-width: #{$lg-width})';
$gt-lg: '(min-width: #{$lg-width})';

@mixin xs {
  @media #{$xs} {
    @content;
  }
}

@mixin gt-xs {
  @media #{$gt-xs} {
    @content;
  }
}

@mixin sm {
  @media #{$sm} {
    @content;
  }
}

@mixin lt-sm {
  @media #{$lt-sm} {
    @content;
  }
}

@mixin gt-sm {
  @media #{$gt-sm} {
    @content;
  }
}

@mixin md {
  @media #{$md} {
    @content;
  }
}

@mixin lt-md {
  @media #{$lt-md} {
    @content;
  }
}

@mixin gt-md {
  @media #{$gt-md} {
    @content;
  }
}

@mixin lt-lg {
  @media #{$lt-lg} {
    @content;
  }
}

@mixin lg {
  @media #{$lg} {
    @content;
  }
}

@mixin gt-lg {
  @media #{$gt-lg} {
    @content;
  }
}

// aspect-ratio()
//
// Creates a markup that maintains a certain aspect ratio
//
// $width - in pixels
// $height - in pixels

@mixin aspect-ratio($width, $height) {
  position: relative;

  > * {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    margin: auto;
  }

  &:before {
    display: block;
    content: '';
    width: 100%;
    padding-top: calc($height / $width) * 100%;
  }
}

// class-repeater($style, $value, $classes, $prestyle)
//
// Generate classes for a given map of sass variables
//
// Use like so:
// @each $key, $value in $sass-map {
//  @include class-repeater($key, $value, $classes);
// }
//
// Outputs like so:
// .style-variable { style: value }

@mixin class-repeater($style, $value, $classes, $preStyle: '') {
  @each $current_class in $classes {
    .#{$current_class}-#{$style} {
      #{$current_class}: #{$preStyle} #{$value};
    }
  }
}
